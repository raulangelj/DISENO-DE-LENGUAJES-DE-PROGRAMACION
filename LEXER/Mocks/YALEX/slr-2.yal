(* import os *)

(* Lexer para Gramática No. 2 - Expresiones aritméticas extendidas *)

let delim = ["\s\t\n"]
let ws = delim+
let letter = ['A'-'Z''a'-'z']
let digit = ['0'-'9']
let digits = digit+
let id = letter(letter|digit)*
let number = digits('.'digits)?('E'['+''-']?digits)?
let plus = '+'
let minus = '-'
let times = '*'
let div = '/'
let lparen = '('
let rparen = ')'
let equal = '='

rule tokens = 
    ws        { print(WHITESPACE) }               (* Cambie por una acción válida, que devuelva el token *)
  | id        { print(ID) }
  | equal    { print(EQUAL) }
  | number    { print(NUMBER) }
  | plus       { print(PLUS) }
  | minus       { print(MINUS) }
  | times       { print(TIMES) }
  | div       { print(DIV) }
  | lparen       { print(LPAREN) }
  | rparen       { print(RPAREN) }

(* print('trailer') *)